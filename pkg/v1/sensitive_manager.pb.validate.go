// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sensitive_manager.proto

package sensitive

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserRequestMultiError, or nil if none found.
func (m *RegisterUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetEmail()); l < 4 || l > 100 {
		err := RegisterUserRequestValidationError{
			field:  "Email",
			reason: "value length must be between 4 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 4 || l > 128 {
		err := RegisterUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 4 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 50 {
		err := RegisterUserRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterUserRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterUserRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserRequestMultiError) AllErrors() []error { return m }

// RegisterUserRequestValidationError is the validation error returned by
// RegisterUserRequest.Validate if the designated constraints aren't met.
type RegisterUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserRequestValidationError) ErrorName() string {
	return "RegisterUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserRequestValidationError{}

// Validate checks the field values on RegisterUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserResponseMultiError, or nil if none found.
func (m *RegisterUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RegisterUserResponseMultiError(errors)
	}

	return nil
}

// RegisterUserResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserResponseMultiError) AllErrors() []error { return m }

// RegisterUserResponseValidationError is the validation error returned by
// RegisterUserResponse.Validate if the designated constraints aren't met.
type RegisterUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserResponseValidationError) ErrorName() string {
	return "RegisterUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserResponseValidationError{}

// Validate checks the field values on LoginUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginUserRequestMultiError, or nil if none found.
func (m *LoginUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginUserRequestMultiError(errors)
	}

	return nil
}

// LoginUserRequestMultiError is an error wrapping multiple validation errors
// returned by LoginUserRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUserRequestMultiError) AllErrors() []error { return m }

// LoginUserRequestValidationError is the validation error returned by
// LoginUserRequest.Validate if the designated constraints aren't met.
type LoginUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUserRequestValidationError) ErrorName() string { return "LoginUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUserRequestValidationError{}

// Validate checks the field values on LoginUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginUserResponseMultiError, or nil if none found.
func (m *LoginUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AccessToken

	// no validation rules for Salt

	// no validation rules for EncryptedDataKey

	if len(errors) > 0 {
		return LoginUserResponseMultiError(errors)
	}

	return nil
}

// LoginUserResponseMultiError is an error wrapping multiple validation errors
// returned by LoginUserResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUserResponseMultiError) AllErrors() []error { return m }

// LoginUserResponseValidationError is the validation error returned by
// LoginUserResponse.Validate if the designated constraints aren't met.
type LoginUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUserResponseValidationError) ErrorName() string {
	return "LoginUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUserResponseValidationError{}

// Validate checks the field values on AddCredentialDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCredentialDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCredentialDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCredentialDataRequestMultiError, or nil if none found.
func (m *AddCredentialDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCredentialDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Login

	// no validation rules for Password

	if len(errors) > 0 {
		return AddCredentialDataRequestMultiError(errors)
	}

	return nil
}

// AddCredentialDataRequestMultiError is an error wrapping multiple validation
// errors returned by AddCredentialDataRequest.ValidateAll() if the designated
// constraints aren't met.
type AddCredentialDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCredentialDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCredentialDataRequestMultiError) AllErrors() []error { return m }

// AddCredentialDataRequestValidationError is the validation error returned by
// AddCredentialDataRequest.Validate if the designated constraints aren't met.
type AddCredentialDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCredentialDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCredentialDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCredentialDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCredentialDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCredentialDataRequestValidationError) ErrorName() string {
	return "AddCredentialDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCredentialDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCredentialDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCredentialDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCredentialDataRequestValidationError{}

// Validate checks the field values on AddCredentialDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCredentialDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCredentialDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCredentialDataResponseMultiError, or nil if none found.
func (m *AddCredentialDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCredentialDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretDataId

	if len(errors) > 0 {
		return AddCredentialDataResponseMultiError(errors)
	}

	return nil
}

// AddCredentialDataResponseMultiError is an error wrapping multiple validation
// errors returned by AddCredentialDataResponse.ValidateAll() if the
// designated constraints aren't met.
type AddCredentialDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCredentialDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCredentialDataResponseMultiError) AllErrors() []error { return m }

// AddCredentialDataResponseValidationError is the validation error returned by
// AddCredentialDataResponse.Validate if the designated constraints aren't met.
type AddCredentialDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCredentialDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCredentialDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCredentialDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCredentialDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCredentialDataResponseValidationError) ErrorName() string {
	return "AddCredentialDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCredentialDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCredentialDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCredentialDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCredentialDataResponseValidationError{}

// Validate checks the field values on GetCredentialDataListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCredentialDataListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCredentialDataListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCredentialDataListRequestMultiError, or nil if none found.
func (m *GetCredentialDataListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCredentialDataListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCredentialDataListRequestMultiError(errors)
	}

	return nil
}

// GetCredentialDataListRequestMultiError is an error wrapping multiple
// validation errors returned by GetCredentialDataListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCredentialDataListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCredentialDataListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCredentialDataListRequestMultiError) AllErrors() []error { return m }

// GetCredentialDataListRequestValidationError is the validation error returned
// by GetCredentialDataListRequest.Validate if the designated constraints
// aren't met.
type GetCredentialDataListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialDataListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialDataListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialDataListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialDataListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialDataListRequestValidationError) ErrorName() string {
	return "GetCredentialDataListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialDataListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialDataListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialDataListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialDataListRequestValidationError{}

// Validate checks the field values on CredentialData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CredentialData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CredentialData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CredentialDataMultiError,
// or nil if none found.
func (m *CredentialData) ValidateAll() error {
	return m.validate(true)
}

func (m *CredentialData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Login

	// no validation rules for Password

	if len(errors) > 0 {
		return CredentialDataMultiError(errors)
	}

	return nil
}

// CredentialDataMultiError is an error wrapping multiple validation errors
// returned by CredentialData.ValidateAll() if the designated constraints
// aren't met.
type CredentialDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CredentialDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CredentialDataMultiError) AllErrors() []error { return m }

// CredentialDataValidationError is the validation error returned by
// CredentialData.Validate if the designated constraints aren't met.
type CredentialDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialDataValidationError) ErrorName() string { return "CredentialDataValidationError" }

// Error satisfies the builtin error interface
func (e CredentialDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentialData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialDataValidationError{}

// Validate checks the field values on GetCredentialDataListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCredentialDataListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCredentialDataListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCredentialDataListResponseMultiError, or nil if none found.
func (m *GetCredentialDataListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCredentialDataListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCredentialData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCredentialDataListResponseValidationError{
						field:  fmt.Sprintf("CredentialData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCredentialDataListResponseValidationError{
						field:  fmt.Sprintf("CredentialData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCredentialDataListResponseValidationError{
					field:  fmt.Sprintf("CredentialData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCredentialDataListResponseMultiError(errors)
	}

	return nil
}

// GetCredentialDataListResponseMultiError is an error wrapping multiple
// validation errors returned by GetCredentialDataListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCredentialDataListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCredentialDataListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCredentialDataListResponseMultiError) AllErrors() []error { return m }

// GetCredentialDataListResponseValidationError is the validation error
// returned by GetCredentialDataListResponse.Validate if the designated
// constraints aren't met.
type GetCredentialDataListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialDataListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialDataListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialDataListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialDataListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialDataListResponseValidationError) ErrorName() string {
	return "GetCredentialDataListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialDataListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialDataListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialDataListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialDataListResponseValidationError{}

// Validate checks the field values on AddTextDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddTextDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTextDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTextDataRequestMultiError, or nil if none found.
func (m *AddTextDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTextDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Data

	if len(errors) > 0 {
		return AddTextDataRequestMultiError(errors)
	}

	return nil
}

// AddTextDataRequestMultiError is an error wrapping multiple validation errors
// returned by AddTextDataRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTextDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTextDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTextDataRequestMultiError) AllErrors() []error { return m }

// AddTextDataRequestValidationError is the validation error returned by
// AddTextDataRequest.Validate if the designated constraints aren't met.
type AddTextDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTextDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTextDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTextDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTextDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTextDataRequestValidationError) ErrorName() string {
	return "AddTextDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddTextDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTextDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTextDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTextDataRequestValidationError{}

// Validate checks the field values on AddTextDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddTextDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTextDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTextDataResponseMultiError, or nil if none found.
func (m *AddTextDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTextDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretDataId

	if len(errors) > 0 {
		return AddTextDataResponseMultiError(errors)
	}

	return nil
}

// AddTextDataResponseMultiError is an error wrapping multiple validation
// errors returned by AddTextDataResponse.ValidateAll() if the designated
// constraints aren't met.
type AddTextDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTextDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTextDataResponseMultiError) AllErrors() []error { return m }

// AddTextDataResponseValidationError is the validation error returned by
// AddTextDataResponse.Validate if the designated constraints aren't met.
type AddTextDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTextDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTextDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTextDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTextDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTextDataResponseValidationError) ErrorName() string {
	return "AddTextDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddTextDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTextDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTextDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTextDataResponseValidationError{}

// Validate checks the field values on GetTextDataListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTextDataListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextDataListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTextDataListRequestMultiError, or nil if none found.
func (m *GetTextDataListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextDataListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTextDataListRequestMultiError(errors)
	}

	return nil
}

// GetTextDataListRequestMultiError is an error wrapping multiple validation
// errors returned by GetTextDataListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTextDataListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextDataListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextDataListRequestMultiError) AllErrors() []error { return m }

// GetTextDataListRequestValidationError is the validation error returned by
// GetTextDataListRequest.Validate if the designated constraints aren't met.
type GetTextDataListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextDataListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextDataListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextDataListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextDataListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextDataListRequestValidationError) ErrorName() string {
	return "GetTextDataListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTextDataListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextDataListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextDataListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextDataListRequestValidationError{}

// Validate checks the field values on NoteData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoteData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoteData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoteDataMultiError, or nil
// if none found.
func (m *NoteData) ValidateAll() error {
	return m.validate(true)
}

func (m *NoteData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Data

	if len(errors) > 0 {
		return NoteDataMultiError(errors)
	}

	return nil
}

// NoteDataMultiError is an error wrapping multiple validation errors returned
// by NoteData.ValidateAll() if the designated constraints aren't met.
type NoteDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoteDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoteDataMultiError) AllErrors() []error { return m }

// NoteDataValidationError is the validation error returned by
// NoteData.Validate if the designated constraints aren't met.
type NoteDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoteDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoteDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoteDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoteDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoteDataValidationError) ErrorName() string { return "NoteDataValidationError" }

// Error satisfies the builtin error interface
func (e NoteDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoteData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoteDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoteDataValidationError{}

// Validate checks the field values on GetTextDataListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTextDataListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextDataListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTextDataListResponseMultiError, or nil if none found.
func (m *GetTextDataListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextDataListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNoteData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTextDataListResponseValidationError{
						field:  fmt.Sprintf("NoteData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTextDataListResponseValidationError{
						field:  fmt.Sprintf("NoteData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTextDataListResponseValidationError{
					field:  fmt.Sprintf("NoteData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTextDataListResponseMultiError(errors)
	}

	return nil
}

// GetTextDataListResponseMultiError is an error wrapping multiple validation
// errors returned by GetTextDataListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTextDataListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextDataListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextDataListResponseMultiError) AllErrors() []error { return m }

// GetTextDataListResponseValidationError is the validation error returned by
// GetTextDataListResponse.Validate if the designated constraints aren't met.
type GetTextDataListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextDataListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextDataListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextDataListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextDataListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextDataListResponseValidationError) ErrorName() string {
	return "GetTextDataListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTextDataListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextDataListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextDataListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextDataListResponseValidationError{}

// Validate checks the field values on AddCardDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCardDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCardDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCardDataRequestMultiError, or nil if none found.
func (m *AddCardDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCardDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for CardholderName

	// no validation rules for CardNumberEncrypted

	// no validation rules for ExpiryMonth

	// no validation rules for ExpiryYear

	// no validation rules for CvvEncrypted

	if len(errors) > 0 {
		return AddCardDataRequestMultiError(errors)
	}

	return nil
}

// AddCardDataRequestMultiError is an error wrapping multiple validation errors
// returned by AddCardDataRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCardDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCardDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCardDataRequestMultiError) AllErrors() []error { return m }

// AddCardDataRequestValidationError is the validation error returned by
// AddCardDataRequest.Validate if the designated constraints aren't met.
type AddCardDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCardDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCardDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCardDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCardDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCardDataRequestValidationError) ErrorName() string {
	return "AddCardDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCardDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCardDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCardDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCardDataRequestValidationError{}

// Validate checks the field values on AddCardDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCardDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCardDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCardDataResponseMultiError, or nil if none found.
func (m *AddCardDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCardDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretDataId

	if len(errors) > 0 {
		return AddCardDataResponseMultiError(errors)
	}

	return nil
}

// AddCardDataResponseMultiError is an error wrapping multiple validation
// errors returned by AddCardDataResponse.ValidateAll() if the designated
// constraints aren't met.
type AddCardDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCardDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCardDataResponseMultiError) AllErrors() []error { return m }

// AddCardDataResponseValidationError is the validation error returned by
// AddCardDataResponse.Validate if the designated constraints aren't met.
type AddCardDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCardDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCardDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCardDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCardDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCardDataResponseValidationError) ErrorName() string {
	return "AddCardDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCardDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCardDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCardDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCardDataResponseValidationError{}

// Validate checks the field values on GetCardDataListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCardDataListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardDataListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCardDataListRequestMultiError, or nil if none found.
func (m *GetCardDataListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardDataListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCardDataListRequestMultiError(errors)
	}

	return nil
}

// GetCardDataListRequestMultiError is an error wrapping multiple validation
// errors returned by GetCardDataListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCardDataListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardDataListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardDataListRequestMultiError) AllErrors() []error { return m }

// GetCardDataListRequestValidationError is the validation error returned by
// GetCardDataListRequest.Validate if the designated constraints aren't met.
type GetCardDataListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardDataListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardDataListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardDataListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardDataListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardDataListRequestValidationError) ErrorName() string {
	return "GetCardDataListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCardDataListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardDataListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardDataListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardDataListRequestValidationError{}

// Validate checks the field values on CardData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardDataMultiError, or nil
// if none found.
func (m *CardData) ValidateAll() error {
	return m.validate(true)
}

func (m *CardData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for CardholderName

	// no validation rules for CardNumberEncrypted

	// no validation rules for ExpiryMonth

	// no validation rules for ExpiryYear

	// no validation rules for CvvEncrypted

	if len(errors) > 0 {
		return CardDataMultiError(errors)
	}

	return nil
}

// CardDataMultiError is an error wrapping multiple validation errors returned
// by CardData.ValidateAll() if the designated constraints aren't met.
type CardDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardDataMultiError) AllErrors() []error { return m }

// CardDataValidationError is the validation error returned by
// CardData.Validate if the designated constraints aren't met.
type CardDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardDataValidationError) ErrorName() string { return "CardDataValidationError" }

// Error satisfies the builtin error interface
func (e CardDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardDataValidationError{}

// Validate checks the field values on GetCardDataListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCardDataListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardDataListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCardDataListResponseMultiError, or nil if none found.
func (m *GetCardDataListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardDataListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCardData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCardDataListResponseValidationError{
						field:  fmt.Sprintf("CardData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCardDataListResponseValidationError{
						field:  fmt.Sprintf("CardData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCardDataListResponseValidationError{
					field:  fmt.Sprintf("CardData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCardDataListResponseMultiError(errors)
	}

	return nil
}

// GetCardDataListResponseMultiError is an error wrapping multiple validation
// errors returned by GetCardDataListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCardDataListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardDataListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardDataListResponseMultiError) AllErrors() []error { return m }

// GetCardDataListResponseValidationError is the validation error returned by
// GetCardDataListResponse.Validate if the designated constraints aren't met.
type GetCardDataListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardDataListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardDataListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardDataListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardDataListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardDataListResponseValidationError) ErrorName() string {
	return "GetCardDataListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCardDataListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardDataListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardDataListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardDataListResponseValidationError{}
