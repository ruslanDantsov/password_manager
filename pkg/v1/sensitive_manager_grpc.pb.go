// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sensitive_manager.proto

package sensitive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SensitiveDataService_RegisterUser_FullMethodName          = "/sensitivemanager.v1.SensitiveDataService/RegisterUser"
	SensitiveDataService_LoginUser_FullMethodName             = "/sensitivemanager.v1.SensitiveDataService/LoginUser"
	SensitiveDataService_AddCredentialData_FullMethodName     = "/sensitivemanager.v1.SensitiveDataService/AddCredentialData"
	SensitiveDataService_GetCredentialDataList_FullMethodName = "/sensitivemanager.v1.SensitiveDataService/GetCredentialDataList"
)

// SensitiveDataServiceClient is the client API for SensitiveDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensitiveDataServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	AddCredentialData(ctx context.Context, in *AddCredentialDataRequest, opts ...grpc.CallOption) (*AddCredentialDataResponse, error)
	GetCredentialDataList(ctx context.Context, in *GetCredentialDataListRequest, opts ...grpc.CallOption) (*GetCredentialDataListResponse, error)
}

type sensitiveDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensitiveDataServiceClient(cc grpc.ClientConnInterface) SensitiveDataServiceClient {
	return &sensitiveDataServiceClient{cc}
}

func (c *sensitiveDataServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, SensitiveDataService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveDataServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, SensitiveDataService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveDataServiceClient) AddCredentialData(ctx context.Context, in *AddCredentialDataRequest, opts ...grpc.CallOption) (*AddCredentialDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCredentialDataResponse)
	err := c.cc.Invoke(ctx, SensitiveDataService_AddCredentialData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveDataServiceClient) GetCredentialDataList(ctx context.Context, in *GetCredentialDataListRequest, opts ...grpc.CallOption) (*GetCredentialDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialDataListResponse)
	err := c.cc.Invoke(ctx, SensitiveDataService_GetCredentialDataList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensitiveDataServiceServer is the server API for SensitiveDataService service.
// All implementations must embed UnimplementedSensitiveDataServiceServer
// for forward compatibility.
type SensitiveDataServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	AddCredentialData(context.Context, *AddCredentialDataRequest) (*AddCredentialDataResponse, error)
	GetCredentialDataList(context.Context, *GetCredentialDataListRequest) (*GetCredentialDataListResponse, error)
	mustEmbedUnimplementedSensitiveDataServiceServer()
}

// UnimplementedSensitiveDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensitiveDataServiceServer struct{}

func (UnimplementedSensitiveDataServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedSensitiveDataServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedSensitiveDataServiceServer) AddCredentialData(context.Context, *AddCredentialDataRequest) (*AddCredentialDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredentialData not implemented")
}
func (UnimplementedSensitiveDataServiceServer) GetCredentialDataList(context.Context, *GetCredentialDataListRequest) (*GetCredentialDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialDataList not implemented")
}
func (UnimplementedSensitiveDataServiceServer) mustEmbedUnimplementedSensitiveDataServiceServer() {}
func (UnimplementedSensitiveDataServiceServer) testEmbeddedByValue()                              {}

// UnsafeSensitiveDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensitiveDataServiceServer will
// result in compilation errors.
type UnsafeSensitiveDataServiceServer interface {
	mustEmbedUnimplementedSensitiveDataServiceServer()
}

func RegisterSensitiveDataServiceServer(s grpc.ServiceRegistrar, srv SensitiveDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedSensitiveDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SensitiveDataService_ServiceDesc, srv)
}

func _SensitiveDataService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveDataServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensitiveDataService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveDataServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveDataService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveDataServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensitiveDataService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveDataServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveDataService_AddCredentialData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCredentialDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveDataServiceServer).AddCredentialData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensitiveDataService_AddCredentialData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveDataServiceServer).AddCredentialData(ctx, req.(*AddCredentialDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveDataService_GetCredentialDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveDataServiceServer).GetCredentialDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensitiveDataService_GetCredentialDataList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveDataServiceServer).GetCredentialDataList(ctx, req.(*GetCredentialDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensitiveDataService_ServiceDesc is the grpc.ServiceDesc for SensitiveDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensitiveDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensitivemanager.v1.SensitiveDataService",
	HandlerType: (*SensitiveDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _SensitiveDataService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _SensitiveDataService_LoginUser_Handler,
		},
		{
			MethodName: "AddCredentialData",
			Handler:    _SensitiveDataService_AddCredentialData_Handler,
		},
		{
			MethodName: "GetCredentialDataList",
			Handler:    _SensitiveDataService_GetCredentialDataList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sensitive_manager.proto",
}
